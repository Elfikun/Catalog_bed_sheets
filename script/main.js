// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ HTML
function getProductsFromHTML() {
	const productElements = document.querySelectorAll(".product-item");
	const products = [];

	productElements.forEach((element) => {
		let galleryImages = [];
		try {
			galleryImages = JSON.parse(element.dataset.galleryImages || "[]");
		} catch (e) {
			console.error("Error parsing gallery images:", e);
		}

		products.push({
			id: parseInt(element.dataset.id),
			name: element.dataset.name,
			price: parseInt(element.dataset.price),
			image: element.dataset.image,
			hoverImage: element.dataset.hoverImage || element.dataset.image,
			galleryImages:
				galleryImages.length > 0 ? galleryImages : [element.dataset.image],
			category: element.dataset.category,
			description: element.dataset.description,
			detailedDescription:
				element.dataset.detailedDescription || element.dataset.description,
			characteristics: element.dataset.characteristics
				? JSON.parse(element.dataset.characteristics)
				: {},
		});
	});

	return products;
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
let products = [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
function displayProducts(category = "all") {
	const productsGrid = document.getElementById("productsGrid");
	if (!productsGrid) {
		console.error("Element #productsGrid not found");
		return;
	}
	productsGrid.innerHTML = "";

	const filteredProducts =
		category === "all"
			? products
			: products.filter((product) => product.category === category);

	filteredProducts.forEach((product) => {
		const productCard = document.createElement("div");
		productCard.className = "product-card";
		productCard.innerHTML = `
            <img src="${product.image}" alt="${product.name}" class="product-image" data-hover-image="${product.hoverImage}">
            <div class="product-content">
                <h3 class="product-title">${product.name}</h3>
                <p class="product-description">${product.description}</p>
                <div class="product-footer">
                    <span class="product-price">${product.price} ‚ÇΩ</span>
                    <button class="product-btn" data-product-id="${product.id}">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>
                </div>
            </div>
        `;
		productsGrid.appendChild(productCard);

		// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–º–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
		const productImage = productCard.querySelector(".product-image");
		if (productImage && product.hoverImage) {
			productCard.addEventListener("mouseenter", () => {
				productImage.src = product.hoverImage;
			});
			productCard.addEventListener("mouseleave", () => {
				productImage.src = product.image;
			});
		}

		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
		const detailsBtn = productCard.querySelector(".product-btn");
		if (detailsBtn) {
			detailsBtn.addEventListener("click", () => {
				showProductModal(product);
			});
		}
	});
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function showProductModal(product) {
	// –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
	const modal = document.createElement("div");
	modal.className = "modal";
	modal.innerHTML = `
		<div class="modal-content">
			<span class="modal-close">&times;</span>
			<h2 class="modal-title">${product.name}</h2>
			<div class="modal-gallery-container">
				<button class="gallery-prev">‚óÑ</button>
				<div class="modal-gallery">
					${product.galleryImages
						.map(
							(img) => `
						<img src="${img}" alt="${product.name}" class="gallery-image" loading="lazy">
					`
						)
						.join("")}
				</div>
				<button class="gallery-next">‚ñ∫</button>
				<div class="gallery-dots">
					${product.galleryImages
						.map(
							(_, index) => `
						<span class="gallery-dot" data-index="${index}"></span>
					`
						)
						.join("")}
				</div>
			</div>
			<p class="modal-description">${product.detailedDescription}</p>
			<div class="modal-characteristics">
				<h3>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</h3>
				<ul>
					${Object.entries(product.characteristics)
						.map(
							([key, value]) => `
						<li><strong>${key}:</strong> ${value}</li>
					`
						)
						.join("")}
				</ul>
			</div>
			<div class="modal-price">${product.price} ‚ÇΩ</div>
		</div>
	`;

	document.body.appendChild(modal);

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª
	modal.style.display = "flex";

	// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∞
	const closeBtn = modal.querySelector(".modal-close");
	closeBtn.addEventListener("click", () => {
		modal.remove();
	});

	// –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª–∞
	modal.addEventListener("click", (e) => {
		if (e.target === modal) {
			modal.remove();
		}
	});

	// –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Esc
	document.addEventListener(
		"keydown",
		(e) => {
			if (e.key === "Escape" && modal.style.display === "flex") {
				modal.remove();
			}
		},
		{ once: true }
	);

	// –ù–∞–≤–∏–≥–∞—Ü–∏—è –≥–∞–ª–µ—Ä–µ–∏
	const gallery = modal.querySelector(".modal-gallery");
	const prevBtn = modal.querySelector(".gallery-prev");
	const nextBtn = modal.querySelector(".gallery-next");
	if (gallery && prevBtn && nextBtn) {
		prevBtn.addEventListener("click", () => {
			gallery.scrollBy({ left: -300, behavior: "smooth" });
		});
		nextBtn.addEventListener("click", () => {
			gallery.scrollBy({ left: 300, behavior: "smooth" });
		});
	}

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Ç–æ—á–µ–∫
	const dots = modal.querySelectorAll(".gallery-dot");
	if (dots.length > 0) {
		const updateActiveDot = () => {
			const scrollLeft = gallery.scrollLeft;
			const imageWidth =
				gallery.querySelector(".gallery-image").offsetWidth + 10; // +gap
			const activeIndex = Math.round(scrollLeft / imageWidth);
			dots.forEach((dot, index) => {
				dot.classList.toggle("active", index === activeIndex);
			});
		};

		gallery.addEventListener("scroll", updateActiveDot);
		updateActiveDot(); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	}
}

// –ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é
const menuToggle = document.getElementById("menuToggle");
const mobileMenu = document.getElementById("mobileMenu");

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
if (menuToggle && mobileMenu) {
	menuToggle.addEventListener("click", () => {
		const isMenuVisible = mobileMenu.style.display === "block";
		mobileMenu.style.display = isMenuVisible ? "none" : "block";

		// –î–æ–±–∞–≤–ª—è–µ–º/—É–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
		if (!isMenuVisible) {
			mobileMenu.style.opacity = "0";
			mobileMenu.style.transform = "translateY(-10px)";
			setTimeout(() => {
				mobileMenu.style.opacity = "1";
				mobileMenu.style.transform = "translateY(0)";
			}, 10);
		}
	});
}

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞
document.addEventListener("DOMContentLoaded", () => {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ HTML
	products = getProductsFromHTML();

	// –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
	displayProducts("all");

	const categoryButtons = document.querySelectorAll(".category-btn");

	categoryButtons.forEach((button) => {
		button.addEventListener("click", () => {
			// –£–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
			categoryButtons.forEach((btn) => btn.classList.remove("active"));

			// –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
			button.classList.add("active");

			// –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã
			const category = button.getAttribute("data-category");
			displayProducts(category);
		});
	});

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫"
	const callbackBtn = document.querySelector(".callback-btn");
	if (callbackBtn) {
		callbackBtn.addEventListener("click", (e) => {
			e.preventDefault();
			const contactsSection = document.getElementById("contacts");
			if (contactsSection) {
				window.scrollTo({
					top: contactsSection.offsetTop - 80,
					behavior: "smooth",
				});
			}
		});
	}
});

// –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Å–µ–∫—Ü–∏—è–º
document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
	anchor.addEventListener("click", function (e) {
		e.preventDefault();

		const targetId = this.getAttribute("href");
		const targetElement = document.querySelector(targetId);

		if (targetElement) {
			window.scrollTo({
				top: targetElement.offsetTop - 80,
				behavior: "smooth",
			});

			// –°–∫—Ä—ã—Ç—å –º–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å—Å—ã–ª–∫—É
			if (mobileMenu && mobileMenu.style.display === "block") {
				mobileMenu.style.display = "none";
			}
		}
	});
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã
const contactForm = document.getElementById("contactForm");

if (contactForm) {
	contactForm.addEventListener("submit", async (e) => {
		e.preventDefault();

		// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
		const formData = new FormData(contactForm);
		const name = formData.get("name");
		const email = formData.get("email");
		const message = formData.get("message");

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
		const telegramMessage = `
*–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞ LINEN HOUSE*

üë§ –ò–º—è: ${name}
üìß Email: ${email}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}

---
–î–∞—Ç–∞: ${new Date().toLocaleString("ru-RU")}
`;

		// –í–∞—à Telegram Bot Token (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
		const botToken = "YOUR_BOT_TOKEN_HERE";
		// –í–∞—à Chat ID (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
		const chatId = "YOUR_CHAT_ID_HERE";

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –∏ chat ID –∑–∞–¥–∞–Ω—ã
		if (botToken === "YOUR_BOT_TOKEN_HERE" || chatId === "YOUR_CHAT_ID_HERE") {
			alert(
				"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Telegram Bot Token –∏ Chat ID –≤ –∫–æ–¥–µ main.js"
			);
			return;
		}

		try {
			const response = await fetch(
				`https://api.telegram.org/bot${botToken}/sendMessage`,
				{
					method: "POST",
					headers: {
						"Content-Type": "application/json",
					},
					body: JSON.stringify({
						chat_id: chatId,
						text: telegramMessage,
						parse_mode: "Markdown",
					}),
				}
			);

			const result = await response.json();

			if (result.ok) {
				alert("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.");
				contactForm.reset();
			} else {
				alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
				console.error("Telegram API error:", result);
			}
		} catch (error) {
			alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
			console.error("Fetch error:", error);
		}
	});
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
document.addEventListener("click", (e) => {
	if (mobileMenu && menuToggle) {
		if (
			mobileMenu.style.display === "block" &&
			!mobileMenu.contains(e.target) &&
			e.target !== menuToggle &&
			!menuToggle.contains(e.target)
		) {
			mobileMenu.style.display = "none";
		}
	}
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
window.addEventListener("resize", () => {
	if (mobileMenu) {
		if (window.innerWidth > 768) {
			mobileMenu.style.display = "none";
		}
	}
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ hero —Å–µ–∫—Ü–∏–∏
document.addEventListener("DOMContentLoaded", () => {
	const btnPrimary = document.querySelector(".btn-primary");
	const btnSecondary = document.querySelector(".btn-secondary");

	if (btnPrimary) {
		btnPrimary.addEventListener("click", (e) => {
			e.preventDefault();
			const catalogSection = document.getElementById("catalog");
			if (catalogSection) {
				window.scrollTo({
					top: catalogSection.offsetTop - 80,
					behavior: "smooth",
				});
			}
		});
	}

	if (btnSecondary) {
		btnSecondary.addEventListener("click", (e) => {
			e.preventDefault();
			const aboutSection = document.getElementById("about");
			if (aboutSection) {
				window.scrollTo({
					top: aboutSection.offsetTop - 80,
					behavior: "smooth",
				});
			}
		});
	}
});
